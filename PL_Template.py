#Pipeline Analysis Workflow
#Code generated by Loren Suite
#06/01/2021

#The Pipeline Analysis Workflow EmpowerIT file must be run first to extract the most updated tsp5_demand file.

#Import applicable libraries

import win32com.client as win32
from win32com.client import DispatchEx
import openpyxl
import pandas as pd
import openpyxl
from openpyxl import workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment
from openpyxl.cell import Cell
import random

from openpyxl.formula.translate import Translator

#Import library, record, and print the date of the workflow execution.
from datetime import date
today = date.today()
newDate = today.strftime("%Y%m%d")
print("Today's date:", newDate)

#Creates variable for the necessary file destinations.
tsp5_file = 'C:\\Users\\Administrator\\Downloads\\tsp5_demand.xlsx'
PL_file = 'C:\\Users\\Administrator\\Downloads\\PL_20210521_Workflow.xlsx'
updated_file = 'C:\\Users\\Administrator\\Downloads\\PL_Updated_Workflow.xlsx'
tsp5_updated = 'C:\\Users\\Administrator\\Downloads\\tsp5_updated.xlsx'
pl_template = 'C:\\Users\\Administrator\\Downloads\\PL_template.xlsx'
pl_merged = 'C:\\Users\\Administrator\\Downloads\\PL_Merged.xlsx'
test_file = 'C:\\Users\\Administrator\\Downloads\\test.xlsx'

#Reads in first tab of tsp5_demand file as a DataFrame in pandas. Prints first 5 rows to verify.
df = pd.read_excel(tsp5_file)
print(df.head())

#Rename columns according to formula requirements.
df = df.rename(columns = {'Commit Level' : 'C/D BD', 'Contract Profit Percentage' : 'Fee %','Period of Performance(In Months)' : 'PoP'})

writer = pd.ExcelWriter(tsp5_updated)
df.to_excel(writer)
writer.save()

#Loads tsp5_updated into a workbook using Openpyxl.
ss = openpyxl.load_workbook(tsp5_updated)

#Opens the tsp5_demand updated file and changes the tab name to reflect the necessary formatting for the main file. Saves.
ss_sheet = ss['Sheet1']
ss_sheet.title = 'Data '+ newDate

#Deletes extra row tracking columns created in the updated DataFrame.
ss_sheet.delete_cols(1)
rowsNeeded = str(ss_sheet.max_row)
print(rowsNeeded)

#Manually set formatted column widths to match previous data files.
ss_sheet.column_dimensions['A'].width = 17.3
ss_sheet.column_dimensions['B'].width = 6
ss_sheet.column_dimensions['C'].width = 15.3
ss_sheet.column_dimensions['D'].width = 15.3
ss_sheet.column_dimensions['E'].width = 14.3
ss_sheet.column_dimensions['F'].width = 15.3
ss_sheet.column_dimensions['G'].width = 20.3
ss_sheet.column_dimensions['H'].width = 9.40
ss_sheet.column_dimensions['I'].width = 13.0
ss_sheet.column_dimensions['J'].width = 9.4
ss_sheet.column_dimensions['K'].width = 11.3
ss_sheet.column_dimensions['L'].width = 9.4
ss_sheet.column_dimensions['M'].width = 10.3
ss_sheet.column_dimensions['N'].width = 8.3
ss_sheet.column_dimensions['O'].width = 15.3
ss_sheet.column_dimensions['P'].width = 6.5
ss_sheet.column_dimensions['Q'].width = 17.3
ss_sheet.column_dimensions['R'].width = 9.3
ss_sheet.column_dimensions['S'].width = 14.2
ss_sheet.column_dimensions['T'].width = 17.3
ss_sheet.column_dimensions['U'].width = 11.3
ss_sheet.column_dimensions['V'].width = 17.3
ss_sheet.column_dimensions['W'].width = 19.3
ss_sheet.column_dimensions['X'].width = 16.30
ss_sheet.column_dimensions['Y'].width = 17.3
ss_sheet.column_dimensions['Z'].width = 15.3
ss_sheet.column_dimensions['AA'].width = 4
ss_sheet.column_dimensions['AB'].width = 10.3
ss_sheet.column_dimensions['AC'].width = 15.3
ss_sheet.column_dimensions['AD'].width = 19.3
ss_sheet.column_dimensions['AE'].width = 19.3
ss_sheet.column_dimensions['AF'].width = 19.3
ss_sheet.column_dimensions['AG'].width = 19.3
ss_sheet.column_dimensions['AH'].width = 19.3
ss_sheet.column_dimensions['AI'].width = 16.5
ss_sheet.column_dimensions['AJ'].width = 15.3
ss_sheet.column_dimensions['AK'].width = 12.3
ss_sheet.column_dimensions['AL'].width = 9.40
ss_sheet.column_dimensions['AM'].width = 15.3
ss_sheet.column_dimensions['AN'].width = 17.3
ss_sheet.column_dimensions['AO'].width = 17.3
ss_sheet.column_dimensions['AP'].width = 9.3
ss_sheet.column_dimensions['AQ'].width = 16
ss_sheet.column_dimensions['AR'].width = 16.3
ss_sheet.column_dimensions['AS'].width = 15.3
ss_sheet.column_dimensions['AT'].width = 24.3
ss_sheet.column_dimensions['AU'].width = 14.3
ss_sheet.column_dimensions['AV'].width = 14.3

#Format all cells in tsp5_demand to be text wrapped and with a top vertical adjustment.
for row in ss_sheet.iter_rows():
    for cell in row:
        cell.alignment = Alignment(wrap_text = True,vertical = 'top')

#Saves the updated tsp5 file before merging with the PL template excel file.
ss.save(tsp5_updated)

#Opens the two workbooks needed and merges them by placing the single tab from tsp5_demand before the first tab of the
#main file. Saves the merged workbook as PL_Merged and opens the Excel file for viewing. Quits excel to prepare for next
#actions.
excel = DispatchEx('Excel.Application')
excel.Visible = False
PL_workbook = excel.Workbooks.Open(pl_template)
tsp5_workbook = excel.Workbooks.Open(tsp5_updated)
tsp5_workbook.Worksheets(ss_sheet.title).Move(Before = PL_workbook.Worksheets(1))
excel.DisplayAlerts = False
PL_workbook.SaveAs(pl_merged)
excel.DisplayAlerts = True
excel.Visible = True
excel.Application.Quit()
print('Files have been successfully merged.')

#Opens the PL_merged file using Openpyxl as a workbook and creates a worksheet for each of the tabs.
data_file = openpyxl.load_workbook(pl_merged)
#Creates a worksheet for the first tab containing the tsp5_demand data.
data_sheet = data_file.worksheets[0]
#Creates a worksheet for the second tab containing the PL_template sheet.
date_sheet = data_file.worksheets[1]

#Reads in and prints a cell from the PL_Template sheet in the PL Merged document.
cell_pl = date_sheet.cell(row = 6, column = 17)
print(cell_pl)

#Reads in the number of opportunity number rows and converts the integer to a string.
baseRows = data_sheet.max_row
strRows = str(baseRows)

#Defines the header name.
sheetid = data_file.sheetnames.index('Data ' + newDate)
print(sheetid)
hdr_range = openpyxl.workbook.defined_name.DefinedName('PLS_Hdr_'+ newDate, attr_text = 'Data' + newDate +  '!$A$1:$AV$1', localSheetId = sheetid)
data_file.defined_names.append(hdr_range)

assert('PLS_Hdr_' + newDate not in data_file.defined_names)

#Defines the data name.
data_range = openpyxl.workbook.defined_name.DefinedName('PLS_Data_'+ newDate, attr_text = 'Data' + newDate + '!$A$2:$AV$' + strRows, localSheetId = sheetid)
data_file.defined_names.append(data_range)

assert('PLS_Data_' + newDate not in data_file.defined_names)

#Prints the names and ranges of the "Define Names" actions above.
print("   ")
print('The Define Name parameters are:')
print(data_file.defined_names.localnames(sheetid))

print("   ")
print('The header range is:')
print(data_file.defined_names.get('PLS_Hdr_' + newDate, sheetid).attr_text)

print("   ")
print('The data range is:')
print(data_file.defined_names.get('PLS_Data_' + newDate, sheetid).attr_text)
print("   ")

#Defines copyRange to bring in a specified range of cells to be copied over for transfer.
def copyRange(startCol, startRow, endCol, endRow ,sheet):
    rangeSelected=[]
    for i in range(startRow, endRow + 1, 1):
        rowSelected = []
        for j in range(startCol, endCol + 1, 1):
            rowSelected.append(data_sheet.cell(row = i, column = j).value)
            rangeSelected.append(rowSelected)
    return rangeSelected

#Define pasteRange to dictate where the cells should be pasted in the recieving document.
def pasteRange(startCol, startRow, endCol, endRow, sheetRecieving, copiedData):
    countRow = 1
    for i in range(0, len(copiedData), 1):
        countCol = 1
        for j in range(startCol, endCol+1, 1):
            sheetRecieving.cell(row = startRow + i, column = startCol,value = copiedData[i][0])
            countCol += 1
        countRow += 1
    data_file.save(pl_merged)

#Defines createData to copy and paste the data from one sheet to another. Copies the opportunity column from the tsp5
#data sheet and pastes it into the pre-formatted PL_template opportunity number column starting in column B and on row
#17. Prints at the beginning and end of the process and saves the file. New functions are created for each column that
#needs to be copied over.
def oppNumCopy():
    selectedRange = copyRange(1, 2, 1, baseRows, data_sheet)
    pastingRange = pasteRange(2, 17, 2, baseRows + 18,date_sheet, selectedRange)
    print('Opportunity Number range copied and pasted.')

def oppNameCopy():
    selectedRange = copyRange(4, 2, 4, baseRows, data_sheet)
    pastingRange = pasteRange(6, 17, 6, baseRows + 18,date_sheet, selectedRange)
    print('Opportunity Name range copied and pasted.')

def nciValueCopy():
    selectedRange = copyRange(5, 2, 5, baseRows, data_sheet)
    pastingRange = pasteRange(7, 17, 7, baseRows + 18,date_sheet, selectedRange)
    print('NCI Value in M range copied and pasted.')

def clBDCopy():
    selectedRange = copyRange(2, 2, 2, baseRows, data_sheet)
    pastingRange = pasteRange(8, 17, 8, baseRows + 18,date_sheet, selectedRange)
    print('C/L BD range copied and pasted.')

def estRFPReleaseCopy():
    selectedRange = copyRange(19, 2, 19, baseRows, data_sheet)
    pastingRange = pasteRange(54, 17, 54, baseRows + 18,date_sheet, selectedRange)
    print('Estimated RFP Release range copied and pasted.')

def actRFPReleaseCopy():
    selectedRange = copyRange(20, 2, 20, baseRows, data_sheet)
    pastingRange = pasteRange(55, 17, 55, baseRows + 18,date_sheet, selectedRange)
    print('Actual RFP Lease range copied and pasted.')

def proposalDueCopy():
    selectedRange = copyRange(21, 2, 21, baseRows, data_sheet)
    pastingRange = pasteRange(56, 17, 56, baseRows + 18,date_sheet, selectedRange)
    print('Proposal Due range copied and pasted.')

def proposalSubmittedCopy():
    selectedRange = copyRange(22, 2, 22, baseRows, data_sheet)
    pastingRange = pasteRange(57, 17, 57, baseRows + 18,date_sheet, selectedRange)
    print('Proposal Submitted range copied and pasted.')

def estAwardDateCopy():
    selectedRange = copyRange(23, 2, 23, baseRows, data_sheet)
    pastingRange = pasteRange(58, 17, 58, baseRows + 18, date_sheet, selectedRange)
    print('Estimated Award Date range copied and pasted.')

def actualAwardDateCopy():
    selectedRange = copyRange(24, 2, 24, baseRows, data_sheet)
    pastingRange = pasteRange(59, 17, 59, baseRows + 18, date_sheet, selectedRange)
    print('Actual Award Date copied and pasted.')

def estContractStartCopy():
    selectedRange = copyRange(25, 2, 25, baseRows, data_sheet)
    pastingRange = pasteRange(60, 17, 60, baseRows + 18, date_sheet, selectedRange)
    print('Estimated Contract Start range copied and pasted.')

def estContractEndCopy():
    selectedRange = copyRange(26, 2, 26, baseRows, data_sheet)
    pastingRange = pasteRange(61, 17, 61, baseRows + 18, date_sheet, selectedRange)
    print('Estimated Contract End range copied and pasted.')

def noBidDateCopy():
    selectedRange = copyRange(28, 2, 28, baseRows, data_sheet)
    pastingRange = pasteRange(62, 17, 62, baseRows + 18, date_sheet, selectedRange)
    print('No Bid Date range copied and pasted.')

def popCopy():
    selectedRange = copyRange(27, 2, 27, baseRows, data_sheet)
    pastingRange = pasteRange(63, 17, 63, baseRows + 18, date_sheet, selectedRange)
    print('PoP range copied and pasted.')

def gateReviewDateCopy():
    selectedRange = copyRange(29, 2, 29, baseRows, data_sheet)
    pastingRange = pasteRange(99, 17, 99, baseRows + 18, date_sheet, selectedRange)
    print('Gate Review Date range copied and pasted.')

def gate1DateCopy():
    selectedRange = copyRange(30, 2, 30, baseRows, data_sheet)
    pastingRange = pasteRange(100, 17, 100, baseRows + 18, date_sheet, selectedRange)
    print('Gate 1 App Date range copied and pasted.')

def gate2DateCopy():
    selectedRange = copyRange(31, 2, 31, baseRows, data_sheet)
    pastingRange = pasteRange(101, 17, 101, baseRows + 18, date_sheet, selectedRange)
    print('Gate 2 App Date range copied and pasted.')

def gate3DateCopy():
    selectedRange = copyRange(32, 2, 32, baseRows, data_sheet)
    pastingRange = pasteRange(102, 17, 102, baseRows + 18, date_sheet, selectedRange)
    print('Gate 3 App Date range copied and pasted.')

def gate4DateCopy():
    selectedRange = copyRange(33, 2, 33, baseRows, data_sheet)
    pastingRange = pasteRange(103, 17, 103, baseRows + 18, date_sheet, selectedRange)
    print('Gate 4 App Date range copied and pasted.')

def gate5DateCopy():
    selectedRange = copyRange(34, 2, 34, baseRows, data_sheet)
    pastingRange = pasteRange(104, 17, 104, baseRows + 18, date_sheet, selectedRange)
    print('Gate 5 App Date range copied and pasted.')

def oppStatusCopy():
    selectedRange = copyRange(17, 2, 17, baseRows, data_sheet)
    pastingRange = pasteRange(105, 17, 105, baseRows + 18, date_sheet, selectedRange)
    print('Opportunity Status range copied and pasted.')

def phaseCopy():
    selectedRange = copyRange(18, 2, 18, baseRows, data_sheet)
    pastingRange = pasteRange(106, 17, 106, baseRows + 18, date_sheet, selectedRange)
    print('Phase range copied and pasted.')

def nciRoleCopy():
    selectedRange = copyRange(12, 2, 12, baseRows, data_sheet)
    pastingRange = pasteRange(107, 17, 107, baseRows + 18, date_sheet, selectedRange)
    print('NCI Role range copied and pasted.')

def embeddedAIWorkCopy():
    selectedRange = copyRange(3, 2, 3, baseRows, data_sheet)
    pastingRange = pasteRange(108, 17, 108, baseRows + 18, date_sheet, selectedRange)
    print('Embedded AI Work range copied and pasted.')

def PWINCopy():
    selectedRange = copyRange(14, 2, 14, baseRows, data_sheet)
    pastingRange = pasteRange(109, 17, 109, baseRows + 18, date_sheet, selectedRange)
    print('PWIN range copied and pasted.')

def nciValCopy():
    selectedRange = copyRange(15, 2, 15, baseRows, data_sheet)
    pastingRange = pasteRange(110, 17, 110, baseRows + 18, date_sheet, selectedRange)
    print('NCI Value range copied and pasted.')

def feePerCopy():
    selectedRange = copyRange(16, 2, 16, baseRows, data_sheet)
    pastingRange = pasteRange(111, 17, 111, baseRows + 18, date_sheet, selectedRange)
    print('Fee % range copied and pasted.')

def winnerPriceCopy():
    selectedRange = copyRange(6, 2, 6, baseRows, data_sheet)
    pastingRange = pasteRange(112, 17, 112, baseRows + 18, date_sheet, selectedRange)
    print('Winner Price range copied and pasted.')

def parentCopy():
    selectedRange = copyRange(8, 2, 8, baseRows, data_sheet)
    pastingRange = pasteRange(113, 17, 113, baseRows + 18, date_sheet, selectedRange)
    print('Parent range copied and pasted.')

def endCustomerCopy():
    selectedRange = copyRange(9, 2, 9, baseRows, data_sheet)
    pastingRange = pasteRange(114, 17, 114, baseRows + 18, date_sheet, selectedRange)
    print('End Customer range copied and pasted.')

def buLeadCopy():
    selectedRange = copyRange(10, 2, 10, baseRows, data_sheet)
    pastingRange = pasteRange(115, 17, 115, baseRows + 18, date_sheet, selectedRange)
    print('BU Lead range copied and pasted.')

def sectorGroupCopy():
    selectedRange = copyRange(11, 2, 11, baseRows, data_sheet)
    pastingRange = pasteRange(116, 17, 116, baseRows + 18, date_sheet, selectedRange)
    print('Sector/Group range copied and pasted.')

def topTierOrgCopy():
    selectedRange = copyRange(7, 2, 7, baseRows, data_sheet)
    pastingRange = pasteRange(118, 17, 118, baseRows + 18, date_sheet, selectedRange)
    print('Top Tier Organization range copied and pasted.')

def procurementTypeCopy():
    selectedRange = copyRange(35, 2, 35, baseRows, data_sheet)
    pastingRange = pasteRange(119, 17, 119, baseRows + 18, date_sheet, selectedRange)
    print('Procurement Type range copied and pasted.')

def contractVehicleCopy():
    selectedRange = copyRange(36, 2, 36, baseRows, data_sheet)
    pastingRange = pasteRange(120, 17, 120, baseRows + 18, date_sheet, selectedRange)
    print('Contract Vehicle range copied and pasted.')

def contractTypeCopy():
    selectedRange = copyRange(37, 2, 37, baseRows, data_sheet)
    pastingRange = pasteRange(121, 17, 121, baseRows + 18, date_sheet, selectedRange)
    print('Contract Type range copied and pasted.')

def strategyCopy():
    selectedRange = copyRange(39, 2, 39, baseRows, data_sheet)
    pastingRange = pasteRange(122, 17, 122, baseRows + 18, date_sheet, selectedRange)
    print('Strategy range copied and pasted.')

def dispositionNoteCopy():
    selectedRange = copyRange(40, 2, 40, baseRows, data_sheet)
    pastingRange = pasteRange(123, 17, 123, baseRows + 18, date_sheet, selectedRange)
    print('Disposition Note range copied and pasted.')

def createdCopy():
    selectedRange = copyRange(42, 2, 42, baseRows, data_sheet)
    pastingRange = pasteRange(124, 17, 124, baseRows + 18, date_sheet, selectedRange)
    print('Created range copied and pasted.')

def updatedCopy():
    selectedRange = copyRange(41, 2, 41, baseRows, data_sheet)
    pastingRange = pasteRange(125, 17, 125, baseRows + 18, date_sheet, selectedRange)
    print('Updated range copied and pasted.')

def createdByCopy():
    selectedRange = copyRange(43, 2, 43, baseRows, data_sheet)
    pastingRange = pasteRange(126, 17, 126, baseRows + 18, date_sheet, selectedRange)
    print('Created By range copied and pasted.')

def captureManagerCopy():
    selectedRange = copyRange(44, 2, 44, baseRows, data_sheet)
    pastingRange = pasteRange(127, 17, 127, baseRows + 18, date_sheet, selectedRange)
    print('Capture Manager range copied and pasted.')

def solutionArchitectCopy():
    selectedRange = copyRange(45, 2, 45, baseRows, data_sheet)
    pastingRange = pasteRange(128, 17, 128, baseRows + 18, date_sheet, selectedRange)
    print('Solution Architect range copied and pasted.')

def proposalManagerCopy():
    selectedRange = copyRange(46, 2, 46, baseRows, data_sheet)
    pastingRange = pasteRange(129, 17, 129, baseRows + 18, date_sheet, selectedRange)
    print('Proposal Manager range copied and pasted.')

def businessDevelopmentLeadCopy():
    selectedRange = copyRange(47, 2, 47, baseRows, data_sheet)
    pastingRange = pasteRange(130, 17, 130, baseRows + 18, date_sheet, selectedRange)
    print('Business Development Lead range copied and pasted.')

def operationLeadCopy():
    selectedRange = copyRange(48, 2, 48, baseRows, data_sheet)
    pastingRange = pasteRange(131, 17, 131, baseRows + 18, date_sheet, selectedRange)
    print('Operation Lead range copied and pasted.')

#Runs the copy functions.
oppNumCopy()
oppNameCopy()
nciValueCopy()
clBDCopy()
estRFPReleaseCopy()
actRFPReleaseCopy()
proposalDueCopy()
proposalSubmittedCopy()
estAwardDateCopy()
actualAwardDateCopy()
estContractStartCopy()
estContractEndCopy()
noBidDateCopy()
popCopy()
gateReviewDateCopy()
gate1DateCopy()
gate2DateCopy()
gate3DateCopy()
gate4DateCopy()
gate5DateCopy()
oppStatusCopy()
phaseCopy()
nciRoleCopy()
embeddedAIWorkCopy()
PWINCopy()
nciValCopy()
feePerCopy()
winnerPriceCopy()
parentCopy()
endCustomerCopy()
buLeadCopy()
sectorGroupCopy()
topTierOrgCopy()
procurementTypeCopy()
contractVehicleCopy()
contractTypeCopy()
strategyCopy()
dispositionNoteCopy()
createdCopy()
updatedCopy()
createdByCopy()
captureManagerCopy()
solutionArchitectCopy()
proposalManagerCopy()
businessDevelopmentLeadCopy()
operationLeadCopy()

#Saves the updated PL_Merged, prints out a success message and quits the Excel program.
data_file.save(pl_merged)
print('All data has been copied to the PL tab successfully.')
excel.Application.Quit()

excel = DispatchEx('Excel.Application')
excel.Visible = False
merged_workbook = excel.Workbooks.Open(pl_merged)
master_workbook = excel.Workbooks.Open(test_file)
merged_workbook.Worksheets(1).Move(Before = master_workbook.Worksheets(1))
excel.DisplayAlerts = False
PL_workbook.SaveAs(updated_file)
excel.DisplayAlerts = True
excel.Visible = True
excel.Application.Quit()
print('Files have been successfully merged.')