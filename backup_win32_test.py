#Pipeline Analysis Workflow
#Code generated by Loren Suite
#05/19/2021

#The Pipeline Analysis Workflow EmpowerIT file must be run first to extract the most updated tsp5_demand file.

#Import applicable libraries
import win32com.client as win32
from win32com.client import DispatchEx
import openpyxl
import pandas as pd
import openpyxl

#Import library, record, and print the date of the workflow execution.
from datetime import date
today = date.today()
newDate = today.strftime("%Y%m%d")
print("Today's date:", newDate)

#Creates variable for the necessary file destinations.
tsp5_file = 'C:\\Users\\Administrator\\Downloads\\tsp5_demand.xlsx'
PL_file = 'C:\\Users\\Administrator\\Downloads\\PL_20210409_Workflow.xlsx'
updated_file = 'C:\\Users\\Administrator\\Downloads\\PL_Updated_Workflow.xlsx'

#Creates a label reflecting the current date for the single tab in the tsp5_demand file.
new_name = 'PL_' + newDate + '_Workflow'

#Opens the tsp5_demand file and changes the tab name to reflect the necessary formatting for the main file. Saves.
ss = openpyxl.load_workbook(tsp5_file)
ss_sheet = ss['Page 1']
ss_sheet.title = 'Data '+ newDate
ss.save(tsp5_file)

#Opens the two workbooks needed and merges them by placing the single tab from tsp5_demand before the first tab of the
#main file. Saves the merged workbook as PL_Updated_Workflow and opens the Excel file for viewing.
excel = DispatchEx('Excel.Application')
excel.Visible = False
PL_workbook = excel.Workbooks.Open(PL_file)
tsp5_workbook = excel.Workbooks.Open(tsp5_file)
tsp5_workbook.Worksheets(ss_sheet.title).Move(Before=PL_workbook.Worksheets(1))
excel.DisplayAlerts = False
PL_workbook.SaveAs(updated_file)
excel.DisplayAlerts = True
excel.Visible = True
print('Files have been successfully merged.')

#Returns the tsp5_demand file to the original tab name so it does not have to be manually done when testing the code.
ss = openpyxl.load_workbook(tsp5_file)
ss_sheet = ss[ss_sheet.title]
ss_sheet.title = 'Page 1'
ss.save(tsp5_file)

#Takes in the Opportunity Number column as an array of integers.
PL_opp_num = pd.read_excel(updated_file, sheet_name = 0)
print(PL_opp_num.head())
print(PL_opp_num['Opportunity Number'])
new_array = []
for x in PL_opp_num['Opportunity Number']:
    new_array.append(int(x))

#Reads in first tab of PL_Updated_Worflow as a DataFrame in pandas. Prints first 5 rows to verify.
df = pd.read_excel(updated_file)
print(df.head())

#Copies in integer versions of opportunity numbers from array into the Opporutnity Number column.
#Effectively completes the part of the workflow where the Opportunity Number column is converted to a number.
df.at[0,'Opportunity Number'] = new_array[0]
print(df.head())

#Rename columns according to formula requirements.
df = df.rename(columns = {'Commit Level' : 'C/D BD', 'Contract Profit Percentage' : 'Fee%','Period of Performance(In Months)' : 'PoP'})

#writer = pd.ExcelWriter(updated_file)
#df_updated.to_excel(writer,updated_file)
#writer.save()


#Prompts the user to close the merged file using the Enter key.
#_ = input('Press enter to close Excel.')

#Final file save. Close out of excel.
excel.DisplayAlerts = False
PL_workbook.SaveAs(updated_file)
excel.DisplayAlerts = True
excel.Application.Quit()