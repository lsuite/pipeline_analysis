#Pipeline Analysis Workflow
#Code generated by Loren Suite
#05/19/2021

#The Pipeline Analysis Workflow EmpowerIT file must be run first to extract the most updated tsp5_demand file.

#Import applicable libraries
import win32com.client as win32
from win32com.client import DispatchEx
import openpyxl
import pandas as pd
import openpyxl
from openpyxl import workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment
from openpyxl.cell import Cell
import random

#Import library, record, and print the date of the workflow execution.
from datetime import date
today = date.today()
newDate = today.strftime("%Y%m%d")
print("Today's date:", newDate)

#Creates variable for the necessary file destinations.
tsp5_file = 'C:\\Users\\Administrator\\Downloads\\tsp5_demand.xlsx'
PL_file = 'C:\\Users\\Administrator\\Downloads\\PL_20210521_Workflow.xlsx'
updated_file = 'C:\\Users\\Administrator\\Downloads\\PL_Updated_Workflow.xlsx'
tsp5_updated = 'C:\\Users\\Administrator\\Downloads\\tsp5_updated.xlsx'
pl_template = 'C:\\Users\\Administrator\\Downloads\\PL_template.xlsx'

#Reads in first tab of tsp5_demand file as a DataFrame in pandas. Prints first 5 rows to verify.
df = pd.read_excel(tsp5_file)
print(df.head())

#Rename columns according to formula requirements.
df = df.rename(columns = {'Commit Level' : 'C/D BD', 'Contract Profit Percentage' : 'Fee %','Period of Performance(In Months)' : 'PoP'})

writer = pd.ExcelWriter(tsp5_updated)
df.to_excel(writer)
writer.save()

#Loads tsp5_updated into a workbook using Openpyxl.
ss = openpyxl.load_workbook(tsp5_updated)

#Opens the tsp5_demand updated file and changes the tab name to reflect the necessary formatting for the main file. Saves.
ss_sheet = ss['Sheet1']
ss_sheet.title = 'Data '+ newDate

#Changing new tab to random color
#r = random.randint(0,255)
#g = random.randint(0,255)
#b = random.randint(0,255)
#rgb = [r+g+b]
#print(rgb)
#ss_sheet.tabColor = 'red'

#Deletes extra row tracking columns created in the updated DataFrame.
ss_sheet.delete_cols(1)

#Manually set formatted column widths to match previous data files.
ss_sheet.column_dimensions['A'].width = 17.3
ss_sheet.column_dimensions['B'].width = 6
ss_sheet.column_dimensions['C'].width = 15.3
ss_sheet.column_dimensions['D'].width = 15.3
ss_sheet.column_dimensions['E'].width = 14.3
ss_sheet.column_dimensions['F'].width = 15.3
ss_sheet.column_dimensions['G'].width = 20.3
ss_sheet.column_dimensions['H'].width = 9.40
ss_sheet.column_dimensions['I'].width = 13.0
ss_sheet.column_dimensions['J'].width = 9.4
ss_sheet.column_dimensions['K'].width = 11.3
ss_sheet.column_dimensions['L'].width = 9.4
ss_sheet.column_dimensions['M'].width = 10.3
ss_sheet.column_dimensions['N'].width = 8.3
ss_sheet.column_dimensions['O'].width = 15.3
ss_sheet.column_dimensions['P'].width = 6.5
ss_sheet.column_dimensions['Q'].width = 17.3
ss_sheet.column_dimensions['R'].width = 9.3
ss_sheet.column_dimensions['S'].width = 14.2
ss_sheet.column_dimensions['T'].width = 17.3
ss_sheet.column_dimensions['U'].width = 11.3
ss_sheet.column_dimensions['V'].width = 17.3
ss_sheet.column_dimensions['W'].width = 19.3
ss_sheet.column_dimensions['X'].width = 16.30
ss_sheet.column_dimensions['Y'].width = 17.3
ss_sheet.column_dimensions['Z'].width = 15.3
ss_sheet.column_dimensions['AA'].width = 4
ss_sheet.column_dimensions['AB'].width = 10.3
ss_sheet.column_dimensions['AC'].width = 15.3
ss_sheet.column_dimensions['AD'].width = 19.3
ss_sheet.column_dimensions['AE'].width = 19.3
ss_sheet.column_dimensions['AF'].width = 19.3
ss_sheet.column_dimensions['AG'].width = 19.3
ss_sheet.column_dimensions['AH'].width = 19.3
ss_sheet.column_dimensions['AI'].width = 16.5
ss_sheet.column_dimensions['AJ'].width = 15.3
ss_sheet.column_dimensions['AK'].width = 12.3
ss_sheet.column_dimensions['AL'].width = 9.40
ss_sheet.column_dimensions['AM'].width = 15.3
ss_sheet.column_dimensions['AN'].width = 17.3
ss_sheet.column_dimensions['AO'].width = 17.3
ss_sheet.column_dimensions['AP'].width = 9.3
ss_sheet.column_dimensions['AQ'].width = 16
ss_sheet.column_dimensions['AR'].width = 16.3
ss_sheet.column_dimensions['AS'].width = 15.3
ss_sheet.column_dimensions['AT'].width = 24.3
ss_sheet.column_dimensions['AU'].width = 14.3
ss_sheet.column_dimensions['AV'].width = 14.3

#Format all cells in tsp5_demand to be text wrapped and with a top vertical adjustment.
for row in ss_sheet.iter_rows():
    for cell in row:
        cell.alignment = Alignment(wrap_text = True,vertical = 'top')

#Defines the header name.
sheetid = ss.sheetnames.index('Data 20210527')
hdr_range = openpyxl.workbook.defined_name.DefinedName('PLS_Hdr_'+ newDate, attr_text = 'Data 20210525!$A$1:$AV$1', localSheetId = sheetid)
ss.defined_names.append(hdr_range)

assert('PLS_Hdr_' + newDate not in ss.defined_names)


#Defines the data name.
data_range = openpyxl.workbook.defined_name.DefinedName('PLS_Data_'+ newDate, attr_text = 'Data 20210525!$A$2:$AV$1368', localSheetId = sheetid)
ss.defined_names.append(data_range)

assert('PLS_Data_' + newDate not in ss.defined_names)

print("   ")
print('The Define Name parameters are:')
print(ss.defined_names.localnames(sheetid))

print("   ")
print('The header range is:')
print(ss.defined_names.get('PLS_Hdr_' + newDate, sheetid).attr_text)

print("   ")
print('The data range is:')
print(ss.defined_names.get('PLS_Data_' + newDate, sheetid).attr_text)
print("   ")

#Saves the updated tsp5 file before merging with the source excel file.
ss.save(tsp5_updated)

#Opens the two workbooks needed and merges them by placing the single tab from tsp5_demand before the first tab of the
#main file. Saves the merged workbook as PL_Updated_Workflow and opens the Excel file for viewing.
excel = DispatchEx('Excel.Application')
excel.Visible = False
PL_workbook = excel.Workbooks.Open(PL_file)
tsp5_workbook = excel.Workbooks.Open(tsp5_updated)
tsp5_workbook.Worksheets(ss_sheet.title).Move(Before=PL_workbook.Worksheets(1))
excel.DisplayAlerts = False
PL_workbook.SaveAs(updated_file)
excel.DisplayAlerts = True
excel.Visible = True
print('Files have been successfully merged.')

#Final file save. Close out of excel.
excel.DisplayAlerts = False
PL_workbook.SaveAs(updated_file)
excel.DisplayAlerts = True
excel.Application.Quit()

#Open the updated PL workbook as a Read Only file using Openpyxl and make the first sheet (Data sheet) active.
fc = openpyxl.load_workbook(updated_file, read_only = True)
date_sheet = fc.active

#Count and output the number of rows in the data sheet.
row_count = date_sheet.max_row
print(row_count)

PL_update_read = pd.read_excel(updated_file, sheet_name = 0)
print(PL_update_read.head())

opp_num_list = []
for x in PL_update_read['Opportunity Number']:
    opp_num_list.append(int(x))
